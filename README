*************************************************************************
Note: 

You are using openssl example to test.
This example is used to show the feasibility of BX method in Fast.

*************************************************************************


-- Your operations can be done like this:

1. Run BX-Get. This step is to parse the source code to a pb file.

2. Suppose there is a tool which can patch on pb file directly. After it patched, use protocol buffer built-in operation to decode it and make a new modifiedPbProcessed.txt.

3. Run BX-Put. This step is to reflect the change on the pb file to the source code. After executing this, the content in the file named as src.c has been changed to a patched one.

4. Compare current src.c(i.e. the patched source code using BX) with patched.c(i.e. patched source code by programmers), except the layout difference on those places near new inserted codes and deleted codes, all informations are consistent. We think that the tool which can operate on the pb file don't take any responsibility to control the layout on the source after it is reflected to the source. 

Also, maybe you think that it is very slow to execute all steps above. However, it is caused by some preprocessing operations. You can just test the BX operations to confirm our alleged fast speed using these steps as below:

     ./ComXMLBiYacc get srcProcessed.xml srcAST

  or
     echo "" > srcPb.txt
     ./ComPBBiYacc put srcPb.txt srcAST

  or 

  	 ./ComPBBiYacc get modifiedPb.txt srcAST

  or
  	 ./ComXMLBiYacc put srcProcessed.xml srcAST

